#ifndef _VP_ADDRESS_HPP_
#define _VP_ADDRESS_HPP_

#include "hardware.hpp"
#include "memory.hpp"
#include "common.hpp"

const sc_dt::uint64 CPU_ROTATED_IMAGE = 0x00000000;
//const sc_dt::uint64 CPU_COL = 0x00000001;

const sc_dt::uint64 VP_ADDRESS_CPU = 0x47A00000;
//const sc_dt::uint64 VP_ADDRESS_CPU_ROTATED_IMAGE = VP_ADDRESS_CPU + CPU_ROTATED_IMAGE;
//const sc_dt::uint64 VP_ADDRESS_CPU_COL = VP_ADDRESS_CPU + CPU_COL;

const sc_dt::uint64 HARDWARE_ROW = 0x00000000; //loc addr for gpio
const sc_dt::uint64 HARDWARE_COL = 0x00000001;
const sc_dt::uint64 HARDWARE_READY = 0x00000002;

const sc_dt::uint64 VP_ADDRESS_HARDWARE = 0x47B00000;
const sc_dt::uint64 VP_ADDRESS_HARDWARE_ROW = VP_ADDRESS_HARDWARE + HARDWARE_ROW;
const sc_dt::uint64 VP_ADDRESS_HARDWARE_COL = VP_ADDRESS_HARDWARE + HARDWARE_COL;
const sc_dt::uint64 VP_ADDRESS_HARDWARE_READY = VP_ADDRESS_HARDWARE + HARDWARE_READY;

const sc_dt::uint64 MEMORY_BOUNDARY_ROW = 0x00000000; //loc addr for mem
const sc_dt::uint64 MEMORY_BOUNDARY_COL = 0x00000001;
const sc_dt::uint64 MEMORY_IMAGE = 0x00000002;
const sc_dt::uint64 MEMORY_ANGLE = 0x00000003;
const sc_dt::uint64 MEMORY_DIRECTION = 0x00000004;
const sc_dt::uint64 MEMORY_BOUNDARY_NROW = 0x00000005;
const sc_dt::uint64 MEMORY_BOUNDARY_NCOL = 0x00000006;

const sc_dt::uint64 VP_ADDRESS_MEMORY = 0x47C00000;
const sc_dt::uint64 VP_ADDRESS_MEMORY_BOUNDARY_ROW = VP_ADDRESS_MEMORY + MEMORY_BOUNDARY_ROW;
const sc_dt::uint64 VP_ADDRESS_MEMORY_BOUNDARY_COL = VP_ADDRESS_MEMORY + MEMORY_BOUNDARY_COL;
const sc_dt::uint64 VP_ADDRESS_MEMORY_IMAGE = VP_ADDRESS_MEMORY + MEMORY_IMAGE;
const sc_dt::uint64 VP_ADDRESS_MEMORY_ANGLE = VP_ADDRESS_MEMORY + MEMORY_ANGLE;
const sc_dt::uint64 VP_ADDRESS_MEMORY_DIRECTION = VP_ADDRESS_MEMORY + MEMORY_DIRECTION;
const sc_dt::uint64 VP_ADDRESS_MEMORY_BOUNDARY_NROW = VP_ADDRESS_MEMORY + MEMORY_BOUNDARY_NROW;
const sc_dt::uint64 VP_ADDRESS_MEMORY_BOUNDARY_NCOL = VP_ADDRESS_MEMORY + MEMORY_BOUNDARY_NCOL;

#endif
